//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa :: ToSchema,
)]
#[sea_orm(table_name = "taking_record_table")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: i64,
    pub price_id: i64,
    pub amount: i64,
    pub production_date: DateTime,
    pub taken_date: DateTime,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub is_paid: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::price_history_table::Entity",
        from = "Column::PriceId",
        to = "super::price_history_table::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PriceHistoryTable,
    #[sea_orm(
        belongs_to = "super::user_table::Entity",
        from = "Column::UserId",
        to = "super::user_table::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    UserTable,
}

impl Related<super::price_history_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PriceHistoryTable.def()
    }
}

impl Related<super::user_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserTable.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
